# Terraform release pipeline
variables:
  az_subscription: 'Azure Free Trial (d4dcf2f0-f230-4785-ac04-a37ed6e439ee)'
  tf_directory: '$(Build.SourcesDirectory)/azurerm/_smoketest_az'
  terraform_version: '1.3.9'
  tf_init_cli_options: '-input=false'
  tf_validate_cli_options: ''
  tf_plan_cli_options: '-lock=false -input=false'
  tf_apply_cli_options: '-auto-approve -input=false'

# Release instructions
stages:
- stage: Terraform_Plan
  jobs:
  - deployment: Terraform_Plan
    displayName: Terraform Plan
    continueOnError: 'false'
    environment: 'Terraform_Plan'
    strategy:
      runOnce:
        deploy:
          steps:
            - checkout: self

            - bash: |
                az --version
              displayName: 'Show build list'
              env:
                AZURE_DEVOPS_EXT_PAT: $(System.AccessToken)            

            - task: UniversalPackages@0
              displayName: 'Terraform-Modules Universal Package download'
              inputs:
                vstsFeed: '0176f1d2-6521-4fcb-8ea0-d656f0bee373/757afba2-1461-4bba-b690-c4e73f14e99b'
                vstsFeedPackage: '106abd58-7c30-44b5-be84-ea177f8d396f'
                vstsPackageVersion: '*'

            - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@1
              displayName: 'Install Terraform'
              inputs:
                terraformVersion: $(terraform_version)

            - task: Bash@3
              displayName: 'Terraform Init'
              inputs:
                targetType: 'inline'
                script: 'terraform init $(tf_init_cli_options)'
                workingDirectory: $(tf_directory)
                failOnStderr: true

            - task: AzureCLI@2
              displayName: 'Terraform Plan'
              inputs:
                azureSubscription: 'Azure Free Trial (d4dcf2f0-f230-4785-ac04-a37ed6e439ee)'
                scriptType: bash
                scriptLocation: inlineScript
                inlineScript: 'terraform plan $(tf_plan_cli_options)'
                workingDirectory: $(tf_directory)
                failOnStderr: true
              env:
                AZURE_DEVOPS_EXT_PAT: $(System.AccessToken)          

            #- task: Bash@3
            #  displayName: 'Terraform Plan'
            #  inputs:
            #    targetType: 'inline'
            #    script: 'terraform plan $(tf_plan_cli_options)'
            #    workingDirectory: $(tf_directory)
            #    failOnStderr: true

- stage: Terraform_Apply
  jobs:
  - deployment: Terraform_Apply
    displayName: Terraform Apply
    continueOnError: 'false'
    # Run this stage if previous stage(s) succeeded and build reason ISN'T a pull request
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
    environment: 'Terraform_Apply'
    strategy:
      runOnce:
        deploy:
          steps:
            - checkout: self
            - task: UniversalPackages@0
              displayName: 'Terraform-Modules Universal Package download'
              inputs:
                vstsFeed: '0176f1d2-6521-4fcb-8ea0-d656f0bee373/757afba2-1461-4bba-b690-c4e73f14e99b'
                vstsFeedPackage: '106abd58-7c30-44b5-be84-ea177f8d396f'
                vstsPackageVersion: '*'
            - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@1
              displayName: 'Install Terraform'
              inputs:
                terraformVersion: $(terraform_version)

            - task: Bash@3
              displayName: 'Terraform Init'
              inputs:
                targetType: 'inline'
                script: 'terraform init $(tf_init_cli_options)'
                workingDirectory: $(tf_directory)
                failOnStderr: true

            - task: Bash@3
              displayName: 'Terraform Apply'
              inputs:
                targetType: 'inline'
                script: 'terraform apply $(tf_apply_cli_options)'
                workingDirectory: $(tf_directory)
                failOnStderr: true
